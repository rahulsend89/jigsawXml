import flash.display.BitmapData;import flash.filters.BevelFilter;_root._alpha = 100;var textFormat:TextFormat = new TextFormat ();var gameState:String = "Init";var tr:Boolean = false;var rr:Boolean = false;var br:Boolean = true;var lr:Boolean = false;var xs:Number = 30;var ys:Number = 30;var top:Boolean = false;var right:Boolean = false;var bottom:Boolean = false;var left:Boolean = false;var xn:Number = 5;var yn:Number = 5;var total:Number = xn * yn;var xpoos:Number = 0;var ypoos:Number = 0;var distance:Number = 5;var angleInDegrees:Number = 45;var highlightColor:Number = 0xFFFFFF;var highlightAlpha:Number = .8;var shadowColor:Number = 0x000000;var shadowAlpha:Number = .8;var blurX:Number = 5;var blurY:Number = 5;var imgwidth:Number;var imgheight:Number;var strength:Number = 0.5;var quality:Number = 3;var typoe:String = "inner";var knockout:Boolean = false;var r_mc:MovieClip = this.createEmptyMovieClip ("r_mc", 0);var mclListener:Object = new Object ();var ad_mcl:MovieClipLoader = new MovieClipLoader ();//var img:BitmapData;var imgar:Array = new Array ();var filter:BevelFilter = new BevelFilter (distance, angleInDegrees, highlightColor, highlightAlpha, shadowColor, shadowAlpha, blurX, blurY, strength, quality, typoe, knockout);//trace("strin:"+typeof(eval(xmlRoot)));mclListener.onLoadInit = function (r_mc:MovieClip) {	trace (r_mc._width);};ad_mcl.addListener (mclListener);var xml:XML = new XML ();xml.ignoreWhite = true;xml.load ("xml.xml");xml.onLoad = function (s:Boolean) {	if (s) {		var xmlRoot:XMLNode = xml.firstChild;		for (var i:Number = 0; i < xmlRoot.childNodes.length; i++) {			var _t:String = new String (xmlRoot.childNodes[0].firstChild.nodeValue);		}		gameStart ();		//ad_mcl.loadClip (_t,r_mc);		r_mc.loadMovie (_t);	}};//ad_mcl.addListener (mclListener);//r_mc.loadMovie("r.jpg");r_mc._alpha = 0;//r_mc.opaqueBackground = 0xff0000;//trace(img);//drawShape (100,100,100,100,true,true,true,true);//drawShape (1,"mc",100,100,100,100,false,false,false,false,true);function drawShape (i:Number, mcc:String, xpos:Number, ypos:Number, w:Number, h:Number, t:Boolean, r:Boolean, b:Boolean, l:Boolean, out:Boolean):Array {	//trace(img);	//trace(imgar[i]);	if (xpos < img.width - (img.width / xn)) {		right = false;		rr = true;	} else {		right = false;		rr = false;	}	var mc:MovieClip = this.createEmptyMovieClip (mcc + "" + i, this.getNextHighestDepth ());	mc._x = xs;	mc._y = ys;	if (out) {		mc.lineStyle (0,0xcccccc,100);		mc.beginFill (0xbbbbbb,10);	} else {		//trace ("Array:" + _t);		//trace ("img:" + img);		img.draw (r_mc);		mc.beginBitmapFill (img);	}	mc.moveTo (Number (xpos),Number (ypos));	mc.lineTo (Number (xpos) + Number ((w / 2) - w / 6),Number (ypos));	//first curve	if (tr) {		//mc.curveTo(Number(xpos)+Number((w/2)), Number(ypos)+h/4, Number(xpos)+Number((w/2)+w/6), Number(ypos));		mc.curveTo (Number (xpos) + Number ((w / 2) - w / 3),Number (ypos) + h / 4,Number (xpos) + Number ((w / 2)),Number (ypos) + (h / 4) + 2);		mc.curveTo (Number (xpos) + Number ((w / 2) + w / 3),Number (ypos) + (h / 4),Number (xpos) + Number ((w / 2) + w / 6),Number (ypos));	}	if (t) {		mc.curveTo (Number (xpos) + Number ((w / 2) - w / 3),Number (ypos) - Number (h / 4),Number (xpos) + Number ((w / 2)),Number (ypos) - (h / 4) - 2);		mc.curveTo (Number (xpos) + Number ((w / 2) + w / 3),Number (ypos) - Number (h / 4),Number (xpos) + Number ((w / 2) + w / 6),Number (ypos));	}	mc.lineTo (Number (xpos) + Number (w),Number (ypos));	mc.lineTo (Number (xpos) + Number (w),Number (ypos) + Number ((h / 2 - h / 6)));	//second curve	if (rr) {		mc.curveTo (Number (xpos) + Number ((w - w / 4)),Number (ypos) + Number ((h / 2) - h / 3),Number (xpos) + Number (w - w / 4) - 2,Number (ypos) + Number ((h / 2)));		mc.curveTo (Number (xpos) + Number ((w - w / 4)),Number (ypos) + Number ((h / 2) + h / 3),Number (xpos) + Number (w),Number (ypos) + Number ((h / 2) + h / 6));	}	if (r) {		mc.curveTo (Number (xpos) + Number ((w + w / 4)),Number (ypos) + Number ((h / 2) - h / 3),Number (xpos) + Number (w + w / 4) + 2,Number (ypos) + Number ((h / 2)));		mc.curveTo (Number (xpos) + Number ((w + w / 4)),Number (ypos) + Number ((h / 2) + h / 3),Number (xpos) + Number (w),Number (ypos) + Number ((h / 2) + h / 6));	}	mc.lineTo (Number (xpos) + Number (w),Number (ypos + h));	mc.lineTo (Number (xpos) + Number ((w / 2) + w / 6),Number (ypos + h));	//third curve	if (br) {		mc.curveTo (Number (xpos) + Number ((w / 2) + w / 3),Number (ypos) + Number (h - h / 4),Number (xpos) + Number ((w / 2)),Number (ypos) + Number (h - h / 4) - 2);		mc.curveTo (Number (xpos) + Number ((w / 2) - w / 3),Number (ypos) + Number (h - h / 4),Number (xpos) + Number ((w / 2) - w / 6),Number (ypos) + Number (h));	}	if (b) {		mc.curveTo (Number (xpos) + Number ((w / 2) + w / 3),Number (ypos) + Number (h + h / 4),Number (xpos) + Number ((w / 2)),Number (ypos) + Number (h + h / 4) + 2);		mc.curveTo (Number (xpos) + Number ((w / 2) - w / 3),Number (ypos) + Number (h + h / 4),Number (xpos) + Number ((w / 2) - w / 6),Number (ypos) + Number (h));	}	mc.lineTo (Number (xpos),Number (ypos + h));	mc.lineTo (Number (xpos),Number (ypos) + Number ((h / 2) + h / 6));	//fourth curve	if (lr) {		mc.curveTo (Number (xpos + w / 4),Number (ypos) + Number ((h / 2) + h / 3),Number (xpos + w / 4) + 2,Number (ypos) + Number ((h / 2)));		mc.curveTo (Number (xpos + w / 4),Number (ypos) + Number ((h / 2) - h / 3),Number (xpos),Number (ypos) + Number ((h / 2) - h / 6));	}	if (l) {		mc.curveTo (Number (xpos - w / 4),Number (ypos) + Number ((h / 2) + h / 3),Number (xpos - w / 4) - 2,Number (ypos) + Number ((h / 2)));		mc.curveTo (Number (xpos - w / 4),Number (ypos) + Number ((h / 2) - h / 3),Number (xpos),Number (ypos) + Number ((h / 2) - h / 6));	}	mc.lineTo (Number (xpos),Number (ypos));	mc.endFill ();	var ar:Array = new Array ();	ar.push (img.width);	ar.push (img.height);	return (ar);}function drawShapes (xpos:Number, ypos:Number, xn:Number, yn:Number) {	//trace ("imgh:" + imgheigth);	img = new BitmapData (imgwidth, imgheight, true, 0x00ffffff);	for (var i:Number = 1; i <= total; i++) {		var ar:Array = drawShape (i, "mcc", xpos, ypos, img.width / xn, img.height / yn, top, right, bottom, left, false);		var ar:Array = drawShape (i, "mc", xpos, ypos, img.width / xn, img.height / yn, top, right, bottom, left, true);		if (i < xn) {			top = false;		} else {			top = true;		}		if (i >= (xn * yn) - xn) {			bottom = false;			br = false;		}		xpos += ar[0] / xn;		if (xpos >= ar[0]) {			ypos += ar[1] / yn;			xpos = 0;			left = false;			lr = false;		} else {			lr = false;			left = true;		}	}}//drawShapes(xpoos, ypoos, xn, yn);function gameStart () {	gameState = "gameStart";	createText ("StartGame",1,(Stage.height / 2) - 100,(Stage.width / 2) - 200,100,0x999999);	text1.opaqueBackground = 0xafafaf;	text1.onRollOver = function () {		//textFormat.color = 0xff0000;		//this.t_txt.textColor = 0xcccccc;		createRect ("out",1,this._x,this._y,this._width,this._height);		createText ("StartGame",2,(Stage.height / 2) - 100 - 3,(Stage.width / 2) - 200 - 3,100,0xcccccc);	};	text1.onRollOut = function () {		//textFormat.color = 0xff0000;		this.t_txt.textColor = 0x999999;		out1.removeMovieClip ();		text2.removeMovieClip ();	};	text1.onRelease = function () {		_root._alpha = 0;		out1.removeMovieClip ();		this.removeMovieClip ();		text2.removeMovieClip ();		drawShapes (xpoos,ypoos,xn,yn);		rand (500,500);		startgame ();	};	text1.onReleaseOutside = text1.onRollOut;	//trace(gameState);}//trace(eval("mc"+1).width);var t:Number = total;startgame = function () {	this.alpha = 0;	for (var i:Number = 1; i <= total; i++) {		mc = eval ("mc" + i);		mcc = eval ("mcc" + i);		eval ("mcc" + i).tar = mc;		mcc.onPress = function () {			mc = eval (i);			startDrag (this);			this.swapDepths (this._parent.getNextHighestDepth ());			//trace(t);			this._alpha = 50;			if (eval (this._droptarget) == this.tar) {				this._x = this.tar._x;				this._y = this.tar._y;			}		};		mcc.onRelease = function () {			this._alpha = 75;			if (eval (this._droptarget) == this.tar) {				delete this.onPress;				this._alpha = 100;				delete this.onRelease;				delete this.onReleaseOutside;				this._x = this.tar._x;				this._y = this.tar._y;				t--;				//trace(t);				if (t <= 0) {					trace ("gameover");					removefilter ();				}			}			stopDrag ();		};		mcc.onReleaseOutside = mcc.onRelease;	}};function rand (rx, ry) {	gameState = "gameRandom";	for (var i:Number = 1; i <= total; i++) {		var _mcc = eval ("mcc" + i);		with (_mcc) {			filters = new Array (filter);			_alpha = 75;			_x = random (150);			_y = random (100);			xpr.push (_x);			ypr.push (_y);		}	}}function removefilter () {	for (var i:Number = 0; i <= total; i++) {		eval ("mcc" + i).filters = new Array ();		eval ("mc" + i).removeMovieClip ();	}	gameState = "gameOver";	createText ("GameOver",1,(Stage.height / 2) - 100,(Stage.width / 2) - 200,100,red);}animation = function () {	//trace(gameState);	if (gameState == "gameRandom") {		_root.alpha = 100;		//trace(_root._alpha);	}	if (gameState == "gameOver") {		timer1 = setInterval (fadeout, 1000);	}	_root._alpha -= ((_root._alpha) - (_root.alpha)) / 10;};timer = setInterval (animation, 10);function fadeout () {	_root.alpha = 0;	if (_root._alpha < 1) {		for (var i:Number = 1; i <= total; i++) {			eval ("mcc" + i).removeMovieClip ();			clearInterval (timer);			clearInterval (timer1);		}	}	//clearInterval (timer);                                 	clearInterval (timer1);}function createText (s:String, i:Number, ypos:Number, xpos:Number, sSize:Number, sColor:Number):Void {	var mc:MovieClip = this.createEmptyMovieClip ("text" + i, this.getNextHighestDepth ());	mc.createTextField ("t_txt",mc.getNextHighestDepth (),0,0,0,0);	mc.t_txt.autoSize = "left";	mc.t_txt.text = s;	mc.t_txt.border = bg;	mc.t_txt.selectable = false;	textFormat.size = sSize;	textFormat.color = sColor;	mc._x = xpos;	mc._y = ypos;	mc.t_txt.setTextFormat (textFormat);}function createRect (s:String, i:Number, xpoos:Number, ypoos:Number, w:Number, h:Number) {	var mc:MovieClip = this.createEmptyMovieClip (s + "" + i, this.getNextHighestDepth ());	//mc.filters = new Array(filter);	mc.lineStyle (0,0,100);	mc.moveTo (Number (xpoos),Number (ypoos));	mc.lineTo (Number (xpoos + Number (w)),Number (ypoos));	mc.lineTo (Number (xpoos + Number (w)),Number (ypoos + Number (h)));	mc.lineTo (Number (xpoos),Number (ypoos + Number (h)));	mc.lineTo (Number (xpoos),Number (ypoos));	//trace(mc);}this.onEnterFrame = function () {	imgwidth = r_mc._width;	imgheight = r_mc._height;	//trace("c");	//trace(_t);	if (imgwidth >= 1) {		delete this.onEnterFrame;	}};